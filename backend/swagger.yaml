openapi: 3.0.0
info:
  title: Bronco Coffee Shop API
  description: API documentation for Bronco Coffee Shop mobile application
  version: 1.0.0
  contact:
    name: Bronco Team
    email: info@broncocoffee.com

servers:
  - url: http://localhost:4000/api/v1
    description: Development server
  - url: https://api.broncocoffee.com/v1
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        isAdmin:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - email
        - firstName
        - lastName
        - phone
        - isAdmin
    
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        category:
          type: string
          enum: [coffee, tea, food, dessert, other]
        imageUrl:
          type: string
        isAvailable:
          type: boolean
        customizationOptions:
          type: object
      required:
        - id
        - name
        - price
        - category
        - isAvailable
    
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, accepted, preparing, ready, completed, cancelled]
        pickupTime:
          type: string
          format: date-time
        totalAmount:
          type: number
          format: float
        paymentMethod:
          type: string
          enum: [balance, cash, card]
        isFreeCoffee:
          type: boolean
        notes:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - status
        - totalAmount
        - paymentMethod
        - isFreeCoffee
    
    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
        unitPrice:
          type: number
          format: float
        customization:
          type: object
      required:
        - id
        - orderId
        - productId
        - quantity
        - unitPrice
    
    Balance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        amount:
          type: number
          format: float
        type:
          type: string
          enum: [deposit, withdrawal, refund]
        referenceId:
          type: string
          format: uuid
        balanceAfter:
          type: number
          format: float
        description:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - amount
        - type
        - balanceAfter
    
    Loyalty:
      type: object
      properties:
        coffeeCount:
          type: integer
        freeCoffees:
          type: integer
        usedCoffees:
          type: integer
        availableFreeCoffees:
          type: integer
        progress:
          type: integer
        progressPercentage:
          type: number
          format: float
        coffeeThreshold:
          type: integer
        enabled:
          type: boolean
      required:
        - coffeeCount
        - freeCoffees
        - usedCoffees
        - availableFreeCoffees
    
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
      required:
        - status
        - message

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                phone:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
              required:
                - email
                - password
                - phone
                - firstName
                - lastName
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /products:
    get:
      summary: Get all products
      tags:
        - Products
      parameters:
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category
        - name: available
          in: query
          schema:
            type: boolean
          description: Filter by availability
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: Number of items to return
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      totalCount:
                        type: integer
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
  
  /products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /balance:
    get:
      summary: Get user current balance
      tags:
        - Balance
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      balance:
                        type: number
                        format: float
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /balance/generate-qr:
    post:
      summary: Generate QR code for balance loading
      tags:
        - Balance
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  minimum: 0.01
              required:
                - amount
      responses:
        '200':
          description: QR code generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      qrCode:
                        type: string
                      amount:
                        type: number
                        format: float
                      expires:
                        type: string
                        format: date-time
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /orders:
    post:
      summary: Create a new order
      tags:
        - Orders
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        format: uuid
                      quantity:
                        type: integer
                        minimum: 1
                      customization:
                        type: object
                    required:
                      - productId
                      - quantity
                pickupTime:
                  type: string
                  format: date-time
                paymentMethod:
                  type: string
                  enum: [balance, cash, card]
                useFreeCoffee:
                  type: boolean
                notes:
                  type: string
              required:
                - items
                - paymentMethod
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    get:
      summary: Get user orders
      tags:
        - Orders
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, accepted, preparing, ready, completed, cancelled]
          description: Filter by status
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items to return
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
                      totalCount:
                        type: integer
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
  
  /loyalty:
    get:
      summary: Get user loyalty status
      tags:
        - Loyalty
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Loyalty status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    $ref: '#/components/schemas/Loyalty'
  
  /loyalty/use-free-coffee:
    post:
      summary: Use free coffee
      tags:
        - Loyalty
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Free coffee used
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Loyalty'
        '400':
          description: No free coffees available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /admin/orders:
    get:
      summary: Get all orders (admin only)
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, accepted, preparing, ready, completed, cancelled]
          description: Filter by status
        - name: startDate
          in: query
          schema:
            type: string
            format: date
          description: Filter by start date
        - name: endDate
          in: query
          schema:
            type: string
            format: date
          description: Filter by end date
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Number of items to return
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
                      totalCount:
                        type: integer
                      currentPage:
                        type: integer
                      totalPages:
                        type: integer
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /admin/stats:
    get:
      summary: Get dashboard statistics (admin only)
      tags:
        - Admin
      security:
        - BearerAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month]
            default: day
          description: Statistics period
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success]
                  data:
                    type: object
                    properties:
                      salesByPeriod:
                        type: array
                        items:
                          type: object
                      ordersByStatus:
                        type: array
                        items:
                          type: object
                      popularProducts:
                        type: array
                        items:
                          type: object
                      userStats:
                        type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'